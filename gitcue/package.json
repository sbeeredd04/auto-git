{
  "name": "gitcue",
  "displayName": "GitCue",
  "description": "GitCue â€” AI-powered Git assistant with enhanced interactive sidebar, smart commit automation, and seamless VS Code integration for effortless version control.",
  "version": "0.5.0",
  "publisher": "sbeeredd04",
  "icon": "icon.png",
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "engines": {
    "vscode": "^1.96.0"
  },
  "categories": [
    "SCM Providers",
    "Other"
  ],
  "keywords": [
    "git",
    "ai",
    "automation",
    "commit",
    "gemini",
    "auto-commit",
    "git-automation"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/sbeeredd04/auto-git.git",
    "directory": "gitcue"
  },
  "homepage": "https://github.com/sbeeredd04/auto-git/tree/main/gitcue",
  "bugs": {
    "url": "https://github.com/sbeeredd04/auto-git/issues"
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "gitcue.commit",
        "title": "GitCue: AI Commit",
        "icon": "$(git-commit)"
      },
      {
        "command": "gitcue.watchToggle",
        "title": "GitCue: Toggle Auto-Watch",
        "icon": "$(eye)"
      },
      {
        "command": "gitcue.openDashboard",
        "title": "GitCue: Open Dashboard",
        "icon": "$(dashboard)"
      },
      {
        "command": "gitcue.reset",
        "title": "GitCue: Reset Commits",
        "icon": "$(discard)"
      },
      {
        "command": "gitcue.configure",
        "title": "GitCue: Configure Settings",
        "icon": "$(settings-gear)"
      },
      {
        "command": "gitcue.showStatus",
        "title": "GitCue: Show Status",
        "icon": "$(info)"
      },
      {
        "command": "gitcue.cancelCommit",
        "title": "GitCue: Cancel Pending Commit",
        "icon": "$(close)"
      },
      {
        "command": "gitcue.openInteractiveTerminal",
        "title": "GitCue: Open AI-Powered Shell",
        "icon": "$(terminal)"
      },
      {
        "command": "gitcue.openAITerminal",
        "title": "GitCue: Open AI Terminal",
        "icon": "$(terminal)"
      },
      {
        "command": "gitcue.dashboard",
        "title": "GitCue: Dashboard",
        "icon": "$(dashboard)"
      },
      {
        "command": "gitcue.resetConfig",
        "title": "GitCue: Reset Configuration",
        "icon": "$(refresh)"
      },
      {
        "command": "gitcue.exportConfig",
        "title": "GitCue: Export Configuration",
        "icon": "$(export)"
      },
      {
        "command": "gitcue.importConfig",
        "title": "GitCue: Import Configuration",
        "icon": "$(import)"
      },
      {
        "command": "gitcue.openDocumentation",
        "title": "GitCue: Open Documentation",
        "icon": "$(book)"
      },
      {
        "command": "gitcue.refreshViews",
        "title": "GitCue: Refresh Views",
        "icon": "$(refresh)"
      }
    ],
    "menus": {
      "editor/title": [
        {
          "command": "gitcue.commit",
          "when": "scmProvider == git",
          "group": "navigation"
        }
      ],
      "scm/title": [
        {
          "command": "gitcue.commit",
          "when": "scmProvider == git",
          "group": "navigation"
        },
        {
          "command": "gitcue.watchToggle",
          "when": "scmProvider == git",
          "group": "navigation"
        },
        {
          "command": "gitcue.openInteractiveTerminal",
          "when": "scmProvider == git",
          "group": "navigation"
        }
      ],
      "commandPalette": [
        {
          "command": "gitcue.commit",
          "when": "scmProvider == git"
        },
        {
          "command": "gitcue.watchToggle",
          "when": "scmProvider == git"
        },
        {
          "command": "gitcue.openDashboard",
          "when": "scmProvider == git"
        },
        {
          "command": "gitcue.reset",
          "when": "scmProvider == git"
        },
        {
          "command": "gitcue.cancelCommit",
          "when": "scmProvider == git"
        },
        {
          "command": "gitcue.openInteractiveTerminal",
          "when": "scmProvider == git"
        },
        {
          "command": "gitcue.openAITerminal",
          "when": "scmProvider == git"
        },
        {
          "command": "gitcue.dashboard",
          "when": "scmProvider == git"
        },
        {
          "command": "gitcue.resetConfig"
        },
        {
          "command": "gitcue.exportConfig"
        },
        {
          "command": "gitcue.importConfig"
        },
        {
          "command": "gitcue.openDocumentation"
        },
        {
          "command": "gitcue.refreshViews"
        }
      ]
    },
    "keybindings": [
      {
        "command": "gitcue.commit",
        "key": "ctrl+alt+c",
        "mac": "cmd+alt+c",
        "when": "scmProvider == git"
      },
      {
        "command": "gitcue.watchToggle",
        "key": "ctrl+alt+w",
        "mac": "cmd+alt+w",
        "when": "scmProvider == git"
      },
      {
        "command": "gitcue.cancelCommit",
        "key": "ctrl+alt+x",
        "mac": "cmd+alt+x",
        "when": "scmProvider == git"
      },
      {
        "command": "gitcue.openInteractiveTerminal",
        "key": "ctrl+alt+t",
        "mac": "cmd+alt+t",
        "when": "scmProvider == git"
      }
    ],
    "configuration": {
      "title": "GitCue",
      "properties": {
        "gitcue.geminiApiKey": {
          "type": "string",
          "description": "Your Gemini API key for AI-powered commit messages",
          "scope": "application"
        },
        "gitcue.commitMode": {
          "type": "string",
          "enum": [
            "periodic",
            "intelligent"
          ],
          "default": "intelligent",
          "description": "Commit mode: periodic (time-based) or intelligent (AI-driven decisions)"
        },
        "gitcue.autoPush": {
          "type": "boolean",
          "default": true,
          "description": "Automatically push commits to remote repository"
        },
        "gitcue.watchPaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**/*"
          ],
          "description": "Glob patterns for files to watch for changes"
        },
        "gitcue.debounceMs": {
          "type": "number",
          "default": 30000,
          "description": "Debounce time in milliseconds before processing file changes"
        },
        "gitcue.bufferTimeSeconds": {
          "type": "number",
          "default": 30,
          "description": "Buffer time in seconds to cancel commits in intelligent mode"
        },
        "gitcue.maxCallsPerMinute": {
          "type": "number",
          "default": 15,
          "description": "Maximum API calls per minute for rate limiting"
        },
        "gitcue.enableNotifications": {
          "type": "boolean",
          "default": true,
          "description": "Show notifications for commits and status updates"
        },
        "gitcue.autoWatch": {
          "type": "boolean",
          "default": true,
          "description": "Automatically start watching files when VS Code opens"
        },
        "gitcue.interactiveOnError": {
          "type": "boolean",
          "default": true,
          "description": "Show AI suggestions when commands fail in interactive terminal"
        },
        "gitcue.enableSuggestions": {
          "type": "boolean",
          "default": true,
          "description": "Enable AI-powered error suggestions and analysis"
        },
        "gitcue.terminalVerbose": {
          "type": "boolean",
          "default": false,
          "description": "Enable verbose logging in interactive terminal"
        },
        "gitcue.sessionPersistence": {
          "type": "boolean",
          "default": true,
          "description": "Save and restore command history across sessions"
        },
        "gitcue.maxHistorySize": {
          "type": "number",
          "default": 100,
          "minimum": 10,
          "maximum": 1000,
          "description": "Maximum number of commands to keep in history"
        },
        "gitcue.watchIgnored": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "/(^|[/\\\\])\\../",
            "/node_modules/",
            "/\\.git/",
            "/\\.DS_Store/",
            "/\\.log$/",
            "/\\.tmp$/",
            "/\\.temp$/",
            "/\\.swp$/",
            "/\\.swo$/",
            "/dist\\/",
            "/build\\/",
            "/coverage\\/",
            "/package-lock\\.json$/",
            "/yarn\\.lock$/",
            "/pnpm-lock\\.yaml$/"
          ],
          "description": "Glob patterns for files and directories to ignore when watching"
        },
        "gitcue.intelligentCommit.commitThreshold": {
          "type": "string",
          "enum": [
            "any",
            "medium",
            "major"
          ],
          "default": "medium",
          "description": "Commit threshold: 'any' (all meaningful changes), 'medium' (features/fixes), 'major' (significant features only)"
        },
        "gitcue.intelligentCommit.minTimeBetweenCommits": {
          "type": "number",
          "default": 1800000,
          "description": "Minimum time between commits in milliseconds (default: 30 minutes)"
        },
        "gitcue.intelligentCommit.activitySettleTime": {
          "type": "number",
          "default": 300000,
          "description": "Time to wait for activity to settle before analyzing in milliseconds (default: 5 minutes)"
        },
        "gitcue.intelligentCommit.requireCompleteness": {
          "type": "boolean",
          "default": true,
          "description": "Only commit when changes appear complete (not WIP or debugging code)"
        },
        "gitcue.intelligentCommit.bufferTimeSeconds": {
          "type": "number",
          "default": 30,
          "description": "Buffer time in seconds to cancel commits (overrides global bufferTimeSeconds in intelligent mode)"
        },
        "gitcue.intelligentCommit.cancelOnNewChanges": {
          "type": "boolean",
          "default": true,
          "description": "Automatically cancel pending commits if new changes are detected during buffer period"
        }
      }
    },
    "views": {
      "scm": [
        {
          "id": "gitcueStatus",
          "name": "GitCue Status",
          "when": "scmProvider == git"
        }
      ],
      "gitcue": [
        {
          "id": "gitcueDashboard",
          "name": "Dashboard"
        },
        {
          "id": "gitcueActivity",
          "name": "Activity"
        },
        {
          "id": "gitcueSettings",
          "name": "Settings"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "gitcue",
          "title": "GitCue",
          "icon": "media/gitcue-icon.svg"
        }
      ]
    },
    "menus": {
      "view/item/context": [
        {
          "command": "gitcue.refreshViews",
          "when": "view == gitcueDashboard",
          "group": "inline"
        },
        {
          "command": "gitcue.refreshViews",
          "when": "view == gitcueActivity",
          "group": "inline"
        },
        {
          "command": "gitcue.refreshViews",
          "when": "view == gitcueSettings",
          "group": "inline"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "24.x",
    "@types/vscode": "^1.96.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.25.1",
    "ts-loader": "^9.5.2",
    "typescript": "^5.8.3",
    "webpack": "^5.99.7",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@google/genai": "^1.0.1"
  }
}
